name: Build PyGObject Wheel

on:
  push:
    branches:
      - main
      - dev
    tags:
      - 'v*'
  pull_request:
  workflow_dispatch:

jobs:
  build_wheels:
    name: Build wheels on Windows
    runs-on: windows-latest

    env:
      GTK_VERSION: 3.24
      PYGOBJECT_WHL: '${{ github.workspace }}\pygobject-3.51.0\dist\pygobject-3.51.0-cp311-cp311-win32.whl'
      PYGOBJECT_VERSION: 3.51.0
      PYSCRIPT_DIR: '${{ github.workspace }}\gtk3.24\vcpkg_installed\x86-windows\tools\python3\scripts'
      PYTHON_EXE: '${{ github.workspace }}\gtk3.24\vcpkg_installed\x86-windows\tools\python3\python.exe'
      VCPKG_DEFAULT_TRIPLET: 'x86-windows'

    steps:
      - uses: actions/checkout@v3

      - name: Set up MSVC
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x86

      - name: Download GTK artifacts
        uses: dawidd6/action-download-artifact@v2
        with:
          github_token: ${{secrets.GITHUB_TOKEN}}
          workflow: build.yaml
          name: gtk${{ env.GTK_VERSION }}-windows
          repo: bleachbit/pygtkwin
          path: gtk${{ env.GTK_VERSION }}

      - name: Extract GTK files
        shell: cmd
        run: |
          cd gtk${{ env.GTK_VERSION }}
          certutil -hashfile gtk${{ env.GTK_VERSION }}-x86-windows.zip SHA256
          7z x gtk${{ env.GTK_VERSION }}-x86-windows.zip
          if not exist "%PYTHON_EXE%" (
            echo Error: Python executable not found at %PYTHON_EXE%
            exit /b 1
          )

      - name: Download PyGObject source
        shell: bash
        run: |
          curl -L https://download.gnome.org/sources/pygobject/3.51/pygobject-${{ env.PYGOBJECT_VERSION }}.tar.xz -o pygobject.tar.xz
          certutil -hashfile pygobject.tar.xz SHA256
          echo "5d8ec64b034a29a14c3739541436a07ea0de83c8a394c6e5ecaa9e2e5b7b4e72 pygobject.tar.xz" | sha256sum -c || exit 1
          tar xf pygobject.tar.xz

      - name: Install build dependencies
        shell: cmd
        env:
          PATH: ${{ env.PATH }};${{ env.PYSCRIPT_DIR }}
        run: |
          %PYTHON_EXE% -m ensurepip --upgrade
          %PYTHON_EXE% -m pip install --upgrade pip
          %PYTHON_EXE% -m pip install wheel setuptools build pycairo meson meson-python ninja

      - name: Build wheel
        env:
          PATH: ${{ env.PATH }};${{ env.PYSCRIPT_DIR }}
          PKG_CONFIG: ${{ github.workspace }}\gtk${{ env.GTK_VERSION }}\vcpkg_installed\x86-windows\tools\pkgconf\pkgconf
          PKG_CONFIG_PATH: ${{ github.workspace }}\gtk${{ env.GTK_VERSION }}\vcpkg_installed\x86-windows\lib\pkgconfig
        run: |
          cd pygobject-%PYGOBJECT_VERSION%
          patch -p1 < ${{ github.workspace }}\gi.patch
          echo copying python311.lib as a workaround
          mkdir "${{ github.workspace }}\gtk${{ env.GTK_VERSION }}\vcpkg_installed\x86-windows\tools\python3\libs"
          copy "${{ github.workspace }}\gtk${{ env.GTK_VERSION }}\vcpkg_installed\x86-windows\lib\python311.lib" "${{ github.workspace }}\gtk${{ env.GTK_VERSION }}\vcpkg_installed\x86-windows\tools\python3\libs"
          "%PYTHON_EXE%" -m build --no-isolation --wheel
          dir /b /s *.whl
        shell: cmd

      - name: Test wheel
        env:
          PATH: ${{ env.PATH }};${{ env.PYSCRIPT_DIR }}
        run: |
          if not exist "${{ env.PYGOBJECT_WHL }}" (
            echo Error: ${{ env.PYGOBJECT_WHL }} does not exist.
            exit /b 1
          )
          :: the girepository DLL is in the bin directory
          set "PATH=%PATH%;%GITHUB_WORKSPACE%\gtk3.24\vcpkg_installed\x86-windows\bin"
          echo %PATH%
          dir ${{ github.workspace }}\gtk3.24\vcpkg_installed\x86-windows\bin\gi*.dll
          %PYTHON_EXE% -m pip install "${{ env.PYGOBJECT_WHL }}"
          (echo "import gi" | %PYTHON_EXE%) && echo "gi import succeeded." || echo "gi import failed."
          %PYTHON_EXE% ${{ github.workspace }}/show_versions.py
        shell: cmd

      - name: Upload wheel
        uses: actions/upload-artifact@v4
        with:
          name: pygobject-wheel
          path: ${{ env.PYGOBJECT_WHL}}

      # Release when a tag is pushed
      - name: Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          files: ${{ env.PYGOBJECT_WHL}}
          generate_release_notes: false
          fail_on_unmatched_files: true
